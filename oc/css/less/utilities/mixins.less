/* Mixins */

.visuallyhidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

.border {
	border-style: solid;
	border-width: 1px;
	border-color: @borderColor;
}

.boder-radius (@radius: 5px) {
	-webkit-border-radius: @radius;
	-moz-border-radius: @radius;
	border-radius: @radius;
}

.container-fixed (@width) {
	box-sizing: border-box;
	margin: 0 auto;
	max-width: @width;
	padding: 0 20px;
    width: 100%;
}

.display-table {
	display: table;
    width: 100%;
}

.display-table-cell {
	display: table-cell;
	vertical-align: middle;
}
.highlight-padd {
  padding:3rem;
  background:@lighterGrey;
  box-sizing:border-box;
}
.respond-to('medium',{
  .highlight-padd {
    padding:1rem;
  }
});

.tbl (@bgcolor, @width) {
	width: @width;
	margin: 0 0 2rem;
	td,
	th {
		padding: 2rem;
		border: 1px solid @borderColor;
		background: @bgcolor;
		text-align: left;
	}
	th {
		font-weight: normal;
	}
}
.white-padd {
  .highlight-padd;
  background:@white;
  ul {
    margin-top:0;
  }
  .form-line:last-child {
    margin-bottom:0;
    button {
      margin-bottom:0;
    }
  }
}
.respond-to('medium',{
  .white-padd {
    padding:1rem;
    .form-line:last-child button {

    }
  }
});



/*
Usage:

.respond-to('large',{
  p{
      color:blue;
   }
});

Will produce

@media (max-width: "900px") {
  p {
    color: blue;
  }
}
;

*/
.respond-to(@size; @rules) {
  	.find-by-key(@breakpoints, @size);
    @media (max-width: @find-by-key) {
        @rules();
    }
}

.find-by-key(@array, @key, @fallback...) {
    .-(length(@array));
    .-(@i) when (@i > 0) {.-((@i - 1))}
    .-(@i) when (@key = extract(extract(@array, @i), 1)) {
        @find-by-key: extract(extract(@array, @i), 2);
    }
    .--() {@find-by-key: @fallback} .--;
}
